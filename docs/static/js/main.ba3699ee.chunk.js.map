{"version":3,"sources":["YuImageUploader.jsx","Example.jsx","serviceWorker.js","index.js"],"names":["MyImageUploader","props","e","index","imgFile","target","files","size","this","alert","reader","FileReader","onload","evt","data","count","length","doAddPic","doReplacePic","console","error","readAsDataURL","onChange","splice","onDelete","accept","addImgView","className","type","name","onFileChange","bind","map","pic","url","key","src","alt","onClick","showImgView","React","Component","defaultProps","Example","state","picList","file","doUpload","setState","newPicList","result","doChange","doDelete","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ba3699ee.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './YuImageUploader.css';\n\n/**\n * @name: 自实现多图上传组件\n * @author: yupili\n * @create: 2020/4/16\n **/\nclass MyImageUploader extends React.Component {\n\n  static propTypes = {\n    data: PropTypes.array.isRequired,\n    count: PropTypes.number,\n    accept: PropTypes.string,\n    size: PropTypes.number,\n    onChange: PropTypes.func.isRequired,\n    onDelete: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    count: 1,\n    accept: 'image/*',\n  };\n\n  constructor(props) {\n    super(props);\n  }\n\n  onFileChange(e, index = -1) {\n    const imgFile = e.target.files[0];\n    // validate size\n    const {size} = this.props;\n    if (size && imgFile.size > size) {\n      alert('图片过大！');\n      return;\n    }\n    // read file\n    const reader = new FileReader();\n    reader.onload = evt => {\n      const {data, count} = this.props;\n      if (index < 0 && data.length < count) {\n        this.doAddPic(e, imgFile);\n        return;\n      }\n      if (data.length > index) {\n        this.doReplacePic(e, imgFile, index);\n        return;\n      }\n      console.error(`picture change error, out of index!`);\n      alert('图片加载错误！');\n    };\n    reader.readAsDataURL(imgFile);\n  }\n\n  /**\n   * 插入图片\n   * @param e 文件上传事件\n   * @param imgFile\n   */\n  doAddPic(e, imgFile) {\n    this.props.onChange(e, imgFile);\n  }\n\n  /**\n   * 替换图片\n   * @param e 文件上传事件\n   * @param index 要替换的图片下标\n   * @param imgFile\n   */\n  doReplacePic(e, imgFile, index) {\n    this.props.onChange(e, imgFile, index);\n  }\n\n  /**\n   * 删除图片\n   * @param index 要删除的图片下标\n   */\n  onDelete(index) {\n    let {data} = this.props;\n    if (index >= 0 && index < data.length) {\n      data.splice(index, 1);\n      this.props.onDelete(data);\n      return;\n    }\n    console.error(`picture delete error, out of index!`)\n    alert('图片加载错误！');\n  }\n\n  render() {\n    const {data, count, accept} = this.props;\n\n    const addImgView = (\n      <div className=\"add-img-btn img-box\">\n        <div className=\"plus-icon\">+</div>\n        <input type=\"file\" name=\"files\" className=\"add-img-input\" accept={accept}\n               onChange={this.onFileChange.bind(this)}/>\n      </div>\n    );\n\n    const showImgView = (url, index = 1) => {\n      return (\n        <div className=\"show-img img-box\" key={index}>\n          <img src={url} alt={`图片${index}`}/>\n          <div className=\"mask\">\n            <input type=\"file\" name=\"files\" className=\"add-img-input\" accept={accept}\n                   onChange={e => this.onFileChange(e, index)}/>\n            <div className=\"close-btn\" onClick={this.onDelete.bind(this, index)}>×</div>\n          </div>\n        </div>\n      )\n    };\n\n    return (\n      <div className=\"my-image-uploader\">\n        {data && data.map((pic, index) => {\n          return showImgView(pic, index);\n        })}\n        {data && data.length < count && addImgView}\n      </div>\n    );\n  }\n}\n\nexport default MyImageUploader;\n","import React from 'react';\nimport YuImageUploader from \"./YuImageUploader\";\n\n/**\n * @name: 样例\n * @author: yupili\n * @create: 2020/4/16\n **/\nclass Example extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      picList: []\n    }\n  }\n\n  doChange(e, file, index) {\n    const reader = new FileReader();\n    reader.onload = evt => {\n      // 上传并修改picList\n      this.doUpload(evt, index);\n    };\n    reader.readAsDataURL(file);\n  }\n\n  doDelete(data) {\n    this.setState({\n      picList: data\n    })\n  }\n\n  /**\n   * 上传逻辑（将图片存储到服务器等），上传成功时，将返回的url添加到picList中\n   * @param evt\n   * @param index\n   */\n  doUpload(evt, index) {\n    // 此处默认实现，仅用作展示\n    const {picList} = this.state;\n    let newPicList = [...picList];\n    // 替换\n    if (index) {\n      newPicList[index] = evt.target.result;\n    } else {\n      // 新增\n      newPicList = [...picList, evt.target.result];\n    }\n    this.setState({\n      picList: newPicList\n    })\n  }\n\n\n  render() {\n    const {picList} = this.state;\n    const MAX_SIZE = 1024 * 1024;\n\n    return (\n      <div className=\"example\">\n        <h1>鱼皮-多图上传组件演示</h1>\n        <YuImageUploader data={picList} count={5} size={MAX_SIZE} accept='image/png, image/jpg'\n                         onChange={this.doChange.bind(this)} onDelete={this.doDelete.bind(this)}/>\n      </div>\n    );\n  }\n}\n\nexport default Example;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Example from \"./Example\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Example/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}